---
title: Python 常用库使用方法示例代码
date: 2019-10-18 19:38:35
tags:
- Python
categories:
- Python
---

本文记录了本人使用一些常见库时
多次编写、较为通用的一些代码

记录下来
方便下次继续copy不用造轮子

代码一定会有bug
请带着批判的眼光看待
仅供参考


【本文仅为学习目的，如有侵权，请联系我删除】
<!-- more -->

# Excel表格处理类

文档处理类最常使用的库有
openpyxl、xlrd、xlwt、

对比表

库名|兼容性|速度|功能
:-:|:-:|:-:|:-:
openpyxl|Office 2010 及更新|慢|多
xlrd、xlwt|全平台|快|少

## openpyxl

### 基础

#### 安装

```
pip install openpyxl
```

{% asset_img 1.1.1.1-1.jpg pip安装openpyxl %}

#### 引入

```Python
import openpyxl
```

### xlsx文件操作

#### 新建文件

```Python
# 实例化一个新文件
xlsx_file = openpyxl.Workbook()
```

#### 打开已有文件

使用函数load_workbook(xlsx_file_path)
- 参数 xlsx_file_path 为文件路径
  - 注意在Python中 Windows路径 需要双写反斜杠
- 尝试打开对应路径的xlsx文件
  - 如果文件不存在则新建该文件

```Python
# 文件路径，注意 Windows路径 需要双写反斜杠
xlsx_file_path = C:\\Users\\SimoLin\\Desktop\\test.xlsx
# 打开表格文件
xlsx_file = openpyxl.load_workbook(xlsx_file_path)
```

#### 保存xlsx文件

```Python
# 文件路径，注意 Windows路径 需要双写反斜杠
xlsx_file_path = C:\\Users\\SimoLin\\Desktop\\test.xlsx
# 保存表格文件
xlsx_file.save(xlsx_file_path)
```

### Sheet表操作

#### 选择默认表

默认激活第一个Sheet(在Sheet栏中从左往右)
如下图中，默认激活Sheet1

```Python
# 激活第一个 work_sheet
work_sheet = xlsx_file.active
```

{% asset_img 1.1.3.1-1.jpg 选择默认表 %}

#### 选择指定表

```Python
# Sheet名称
sheet_name = 'Shee1'
# 指定表
work_sheet = xlsx_file[sheet_name]
```

### Cell单元格操作

#### 数据读

```Python
# 方法一 直接读取值
cell_value_1 = work_sheet['A1']
# 方法二 row 行 column 列
cell_value_2 = work_sheet.cell(row = 4, column = 2, value = 10)
```

#### 数据写

```Python
# 方式一 数据可以直接分配到单元格中(可以输入公式)
work_sheet['A1'] = 42
# 方式二 通过list按行赋值，从第一列开始附加(从最下方空白处，最左开始)(可以输入多行)
work_sheet.append([1, 2, 3])
```

#### 单元格样式

##### 合并单元格

```Python
# 合并A1到B2的所有单元格(两个参数分别为左上和右下)
sheet.merge_cells('A1:B2')
```

可以使用参数代替对应的值

```Python
# 合并A1到B2的所有单元格
row_index = 1
sheet.merge_cells('A%d:B%d' % (row_index, row_index + 1))
```

可以使用 get_column_letter() 函数将数字序号转为列对应的字母

```Python
from openpyxl.utils import get_column_letter
# 合并A1到B2的所有单元格

column_index = 1
sheet.merge_cells('%s1:%s2' % (get_column_letter(column_index), get_column_letter(column_index + 1)))
```

同样的 对应列的字母也可以使用 column_index_from_string() 函数转为数字序号
```Python
from openpyxl.utils import column_index_from_string

# 列字母为A
column_letter = 'A'
# 通过column_index_from_string()函数转为序号
column_index = column_index_from_string(column_letter)
```

##### 颜色

```Python
from openpyxl.styles import PatternFill

# fill_type 参数为填充样式 solid 为纯色填充
# fgColor 参数为RGB颜色
fill = PatternFill(fill_type = 'solid', fgColor = '9bc2e6')
# 为A1单元格填充颜色
sheet['A1'].fill = fill
```

##### 对齐

```Python
from openpyxl.styles import Alignment

# 将A1单元格上下居中、左右居中
sheet['A1'].alignment = Alignment(horizontal = 'center', vertical = 'center')
```

### 综合示例

####  示例1 读取xlsx文件写入SQLite数据库

```Python
# 打开表格文件
xlsx_file = openpyxl.load_workbook(xlsx_file_path)
# 循环读取所有表
for sheet in xlsx_file.sheetnames:
    # 按行读取
    count = 0
    for i in range(xlsx_file[sheet].max_row - 1):
        # 写入数据库
        # 执行SQL语句，插入数据
        sql = '''
            insert into db_name (
                column_name_1 TEXT,
                column_name_2 TEXT,
                column_name_3 TEXT
        ) values (?, ?, ?)
        '''
        para = (
            xlsx_file[sheet].cell(row = i + 2, column = 1).value,
            xlsx_file[sheet].cell(row = i + 2, column = 2).value,
            xlsx_file[sheet].cell(row = i + 2, column = 3).value
        )
        try:
            cursor.execute(sql, para)
            count += 1
        except Exception as e:
            print(e)
    count = 0
```

## xlrd、xlwt

### 基础

#### 安装

```
pip install xlrd
pip install xlwt
```

#### 引入

```Python
import xlrd
import xlwt
```


### xlsx文件操作
#### 新建文件
#### 打开已有文件
#### 保存xlsx文件


### Sheet表操作

#### 选择指定表

```Python
# 通过索引获取
table = excel.sheets()[0]  
table = excel.sheet_by_index(0)

#通过表名获取  
table = excel.sheet_by_name('Sheet1')
```

### Cell单元格操作
#### 数据读
#### 数据写
#### 单元格样式

### 综合示例
#### 读取xlsx文件写入SQLite数据库









# 数据库类

## sqlite3

### 打开数据库

```Python
# 如果文件不存在，会自动在当前目录创建:
conn = sqlite3.connect(db_file_name)
# 创建一个Cursor:
cursor = conn.cursor()

# 关闭Cursor:
cursor.close()
# 提交事务:
conn.commit()
# 关闭Connection:
conn.close()
```

### 删除表 DROP

```Python
sql = '''DROP TABlE `table_name`'''
    try:
        cursor.execute(sql)
    except Exception as e:
        print(e)
```

### 创建表 CREATE

```Python
sql = '''
        CREATE TABLE table_name (
            key	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
            column_name_1 TEXT
        );
    '''
try:
    cursor.execute(sql)
except Exception as e:
    print(e)
```

### 插入 INSERT

### 更新 UPDATE

---

# 图形化类

## PyQt5

### ui文件转py文件

使用QT库制作图形化界面时，通常的做法是
在 QT creator 里可视化的进行操作(设计UI界面)
那么生成的界面文件默认格式为.ui
需要转换成.py格式才可以使用Python进行编译

因此，转换格式的命令如下

```
# 标准命令格式
pyuic5 -o <输出的py文件> <输入的ui文件>
# 例如
pyuic5 -o mainwindow.py mainwindow.ui
```



# 文章更新历史

时间|更新内容
:-:|:-:
2019-10-18 19:42:03|新建文章